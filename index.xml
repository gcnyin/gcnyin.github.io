<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>箱子的博客</title>
    <link>https://xiangzi.me/</link>
    <description>Recent content on 箱子的博客</description>
    <generator>Hugo -- 0.125.7</generator>
    <language>en</language>
    <lastBuildDate>Wed, 08 Jan 2025 12:00:00 +0800</lastBuildDate>
    <atom:link href="https://xiangzi.me/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>2024年度回顾</title>
      <link>https://xiangzi.me/post/20250108-2024-review/</link>
      <pubDate>Wed, 08 Jan 2025 12:00:00 +0800</pubDate>
      <guid>https://xiangzi.me/post/20250108-2024-review/</guid>
      <description>元旦夜里，鞭炮声吵四起。我睡不着，回想着过去一年发生了什么。 今年的关键词：远程办公、学会投资、接纳自己。 2023年时，因为各种原因，自己想要</description>
    </item>
    <item>
      <title>使用zio-http, quill与postgres开发web服务</title>
      <link>https://xiangzi.me/post/20230722-zio-http-quill-postgres/</link>
      <pubDate>Sat, 22 Jul 2023 00:53:32 +0800</pubDate>
      <guid>https://xiangzi.me/post/20230722-zio-http-quill-postgres/</guid>
      <description>本文面向有一定scala和zio基础的读者。 zio是用Scala语言开发的一套框架，核心功能是并发管理和资源管理，近年来在scala社区中逐</description>
    </item>
    <item>
      <title>2022年终总结</title>
      <link>https://xiangzi.me/post/20230104-2022-review/</link>
      <pubDate>Wed, 04 Jan 2023 01:07:17 +0800</pubDate>
      <guid>https://xiangzi.me/post/20230104-2022-review/</guid>
      <description>生活 2022年，经历了新冠，我愿意面对生活的残酷，同时在内心留出一小片地方，继续保持着美好生活的向往。诚如罗曼罗兰所言，世界上只有一种真正的</description>
    </item>
    <item>
      <title>一套充分利用本地机器的日志中心架构</title>
      <link>https://xiangzi.me/post/20220814-logging-center-architecture/</link>
      <pubDate>Sun, 14 Aug 2022 23:09:08 +0800</pubDate>
      <guid>https://xiangzi.me/post/20220814-logging-center-architecture/</guid>
      <description>服务搭在k8s上，起一个DaemonSet使用Fluent-Bit收集所有日志，发到Kafka（这个kafka可以是云服务商提供的，或者是自</description>
    </item>
    <item>
      <title>最近搭的一套离线数仓架构</title>
      <link>https://xiangzi.me/post/20220807-offline-data-warehouse/</link>
      <pubDate>Sun, 07 Aug 2022 21:18:13 +0800</pubDate>
      <guid>https://xiangzi.me/post/20220807-offline-data-warehouse/</guid>
      <description>最近在搭公司的离线数仓，整理出了一批很实用的组件，在这里分享下。 spark-sql seatunnel k8s clickhouse hive metastore dolphin-scheduler 使用seatunnel+spark将数据从业务数据库导入cli</description>
    </item>
    <item>
      <title>2021年总结</title>
      <link>https://xiangzi.me/post/20220621-2021-review/</link>
      <pubDate>Tue, 21 Jun 2022 22:42:56 +0800</pubDate>
      <guid>https://xiangzi.me/post/20220621-2021-review/</guid>
      <description>这是一篇迟来的2总结。不知怎么的就忘了写了，一直拖到现在。 2021年是单调无聊的一年。 这一年都是在做实时数仓。主要精力都花在对口径、写sql</description>
    </item>
    <item>
      <title>使用akka踩的一些坑</title>
      <link>https://xiangzi.me/post/20210812-experience-using-akka/</link>
      <pubDate>Thu, 12 Aug 2021 11:06:25 +0800</pubDate>
      <guid>https://xiangzi.me/post/20210812-experience-using-akka/</guid>
      <description>最近在学习 akka，踩了很多坑，这里分享给大家。 使用 akka-stream 限制并发度 原代码如下。 def fetchRlCnt(pageNumbers: Seq[Int]): Future[Int] = { val futures: Seq[Future[HttpResponse]] = pageNumbers .map(page =&amp;gt; Http() .singleRequest(HttpRequest(uri = s&amp;#34;https://examples.org/mix_list/$page&amp;#34;))) Future.sequence(futures) .map(_.map(Unmarshal(_).to[MixList])) .flatMap(Future.sequence(_)) .map(_.map(_.data.rl.length).sum) } 本意是请求所有的分页</description>
    </item>
    <item>
      <title>浅谈TLV协议的实现</title>
      <link>https://xiangzi.me/post/20210712-tlv-protocol/</link>
      <pubDate>Mon, 12 Jul 2021 22:10:50 +0800</pubDate>
      <guid>https://xiangzi.me/post/20210712-tlv-protocol/</guid>
      <description>今天稍微聊点应用层网络协议设计。 简介 众所周知，tcp是一种面向字节流的协议，可以看作一条无尽的水流。如果对水流的内容不加区分，便完全不知道各</description>
    </item>
    <item>
      <title>我的macOS软件清单</title>
      <link>https://xiangzi.me/post/20210629-macos-softwares/</link>
      <pubDate>Tue, 29 Jun 2021 20:31:06 +0800</pubDate>
      <guid>https://xiangzi.me/post/20210629-macos-softwares/</guid>
      <description>工作后一直用MacBook Pro(15款和17款)，除了公司发的，自己也有一台，现在已经完全习惯了在macOS下开发。macOS下的各种工具</description>
    </item>
    <item>
      <title>使用hammerspoon管理macOS窗口</title>
      <link>https://xiangzi.me/post/20210526-use-hammerspoon-to-manage-macos-window/</link>
      <pubDate>Wed, 26 May 2021 19:49:27 +0800</pubDate>
      <guid>https://xiangzi.me/post/20210526-use-hammerspoon-to-manage-macos-window/</guid>
      <description>macOS没有内置窗口管理功能，需要安装第三方软件来实现。常用的免费软件有Spectacle和ShiftIt，这已不再维护。今天将macOS</description>
    </item>
    <item>
      <title>2020年度回顾</title>
      <link>https://xiangzi.me/post/20210103-2020-review/</link>
      <pubDate>Sun, 03 Jan 2021 02:26:00 +0800</pubDate>
      <guid>https://xiangzi.me/post/20210103-2020-review/</guid>
      <description>2020年是我人生中最不寻常的一年，经历了疫情、换工作两件大事。 疫情 这个大家都经历过，不说了。 换工作 马云有句话说的好，“员工的离职原因很多，</description>
    </item>
    <item>
      <title>使用haproxy，nginx与aria2搭建下载服务</title>
      <link>https://xiangzi.me/post/20201226-haproxy-nginx-and-aria2/</link>
      <pubDate>Sat, 26 Dec 2020 00:00:00 +0800</pubDate>
      <guid>https://xiangzi.me/post/20201226-haproxy-nginx-and-aria2/</guid>
      <description>最近搞了一台vps，用它搭建了一个远程下载服务（网盘），包括aria2做下载工具，nginx做静态文件服务，haproxy根据hostnam</description>
    </item>
    <item>
      <title>AWS SQS如何实现指数退避</title>
      <link>https://xiangzi.me/post/20200808-exponential-backoff-in-sqs/</link>
      <pubDate>Sat, 08 Aug 2020 16:35:20 +0800</pubDate>
      <guid>https://xiangzi.me/post/20200808-exponential-backoff-in-sqs/</guid>
      <description>SQS 全称 Simple queue service，是 AWS 推出一款消息队列服务。按照 AWS 官方文档的说法，SQS 居有高吞吐、高可用的特性。从我个人的开发体验来看，SQS 是一</description>
    </item>
    <item>
      <title>AsyncLocalStorage与日志追踪</title>
      <link>https://xiangzi.me/post/20200625-asynclocalstorage-and-logging/</link>
      <pubDate>Thu, 25 Jun 2020 19:26:00 +0800</pubDate>
      <guid>https://xiangzi.me/post/20200625-asynclocalstorage-and-logging/</guid>
      <description>最近在思考node.js如何做服务间与服务内部的日志追踪，一个很简单的实现就是在HTTP request header里添加一个字段x-trace-id来标</description>
    </item>
    <item>
      <title>2019年回顾</title>
      <link>https://xiangzi.me/post/20200101-2019-review/</link>
      <pubDate>Fri, 03 Jan 2020 19:26:00 +0800</pubDate>
      <guid>https://xiangzi.me/post/20200101-2019-review/</guid>
      <description>2019年，虽然有很多不满意，但总的基调是好的。 学习了诸多技术，包括TypeScript、Cocos、Haskell、OS、Akka和Vue</description>
    </item>
    <item>
      <title>mini-parser小轮子</title>
      <link>https://xiangzi.me/post/20191106-mini-parser/</link>
      <pubDate>Wed, 06 Nov 2019 18:00:00 +0800</pubDate>
      <guid>https://xiangzi.me/post/20191106-mini-parser/</guid>
      <description>代码链接 demo如下，定义好rule后进行parse。 const rule = AndRule.of( [ TextRule.of(&amp;#34;hello&amp;#34;, &amp;#34;HELLO_RULE&amp;#34;), OrRule.of( [TextRule.of(&amp;#34;, &amp;#34;), TimesRule.of(3, TextRule.of(&amp;#34; &amp;#34;, &amp;#34;SPACE&amp;#34;), &amp;#34;TIMES&amp;#34;)], &amp;#34;NO_NAME&amp;#34; ), TextRule.of(&amp;#34;world&amp;#34;, &amp;#34;WORLD&amp;#34;), OneOrMoreRule.of(TextRule.of(&amp;#34;!&amp;#34;), &amp;#34;SAMPLE&amp;#34;) ], &amp;#34;HELLO_WORLD&amp;#34; ); console.log(JSON.stringify(rule.accept(&amp;#34;hello world!!!&amp;#34;))); 结果为： { &amp;#34;contain&amp;#34;: true, &amp;#34;group&amp;#34;: { &amp;#34;groups&amp;#34;: [ { &amp;#34;text&amp;#34;: &amp;#34;hello&amp;#34;, &amp;#34;name&amp;#34;: &amp;#34;HELLO_RULE&amp;#34; },</description>
    </item>
    <item>
      <title>JVM if&lt;cond&gt;指令笔记</title>
      <link>https://xiangzi.me/post/20190913-jvm-ifcond/</link>
      <pubDate>Fri, 13 Sep 2019 12:35:00 +0800</pubDate>
      <guid>https://xiangzi.me/post/20190913-jvm-ifcond/</guid>
      <description>format: if&amp;lt;cond&amp;gt; branchByte1 branchByte2 从栈中弹出一个值，和0进行比较，根据指令的不同，有不同的比较方法得出一个值，如果为假，则顺序执行后面的指令。那为真的呢？： branchByte1 branchByte2 都是 0x00</description>
    </item>
    <item>
      <title>配置vim进行Haskell开发</title>
      <link>https://xiangzi.me/post/20190908-vim-haskell/</link>
      <pubDate>Sun, 08 Sep 2019 12:35:00 +0800</pubDate>
      <guid>https://xiangzi.me/post/20190908-vim-haskell/</guid>
      <description>第一步当初是安装vim，推荐使用比较新的8.1+版本。 写haskell需要安装相应的插件，vim没有原生的插件管理系统，所以得先搞定这个。 这</description>
    </item>
    <item>
      <title>slisp：一门简单的JVM上的Lisp方言</title>
      <link>https://xiangzi.me/post/20190101-slisp/</link>
      <pubDate>Tue, 01 Jan 2019 21:00:00 +0800</pubDate>
      <guid>https://xiangzi.me/post/20190101-slisp/</guid>
      <description>之前经常变更学习方向，没有收到很好的学习效果，浪费了不少时间。最近痛定思痛，把方向定为JVM和编译原理，这次真的不改了。本文是学习该方向的阶</description>
    </item>
    <item>
      <title>2018年回顾</title>
      <link>https://xiangzi.me/post/20190101-2018-review/</link>
      <pubDate>Tue, 01 Jan 2019 08:00:00 +0800</pubDate>
      <guid>https://xiangzi.me/post/20190101-2018-review/</guid>
      <description>过年前拿到了offer，详见知乎。 舍友们一起出去旅游，去了华哥他老家还有重庆。 毕业前的几个月，一直一个人窝在北郊的屋子里，长胖了很多。 工作培</description>
    </item>
    <item>
      <title>Arcee：又一个Parser Generator轮子</title>
      <link>https://xiangzi.me/post/20180902-arcee/</link>
      <pubDate>Sun, 02 Sep 2018 12:35:00 +0800</pubDate>
      <guid>https://xiangzi.me/post/20180902-arcee/</guid>
      <description>项目地址：https://github.com/gcnyin/arcee 为什么要做这样一个东西呢？不是有Antlr吗，Python下不是也有</description>
    </item>
    <item>
      <title>About</title>
      <link>https://xiangzi.me/page/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://xiangzi.me/page/about/</guid>
      <description>充满好奇心的程序员。</description>
    </item>
  </channel>
</rss>
