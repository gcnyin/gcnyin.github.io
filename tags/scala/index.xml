<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>scala on 菠萝头</title><link>https://blog.boluotou.tech/tags/scala/</link><description>Recent content in scala on 菠萝头</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 12 Aug 2021 11:06:25 +0800</lastBuildDate><atom:link href="https://blog.boluotou.tech/tags/scala/index.xml" rel="self" type="application/rss+xml"/><item><title>使用akka踩的一些坑</title><link>https://blog.boluotou.tech/post/20210812-experience-using-akka/</link><pubDate>Thu, 12 Aug 2021 11:06:25 +0800</pubDate><guid>https://blog.boluotou.tech/post/20210812-experience-using-akka/</guid><description>&lt;p>最近在学习 akka，踩了很多坑，这里分享给大家。&lt;/p>
&lt;h2 id="使用-akka-stream-限制并发度">使用 akka-stream 限制并发度&lt;/h2>
&lt;p>原代码如下。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> fetchRlCnt&lt;span style="color:#f92672">(&lt;/span>pageNumbers&lt;span style="color:#66d9ef">:&lt;/span> &lt;span style="color:#66d9ef">Seq&lt;/span>&lt;span style="color:#f92672">[&lt;/span>&lt;span style="color:#66d9ef">Int&lt;/span>&lt;span style="color:#f92672">])&lt;/span>&lt;span style="color:#66d9ef">:&lt;/span> &lt;span style="color:#66d9ef">Future&lt;/span>&lt;span style="color:#f92672">[&lt;/span>&lt;span style="color:#66d9ef">Int&lt;/span>&lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#66d9ef">=&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">val&lt;/span> futures&lt;span style="color:#66d9ef">:&lt;/span> &lt;span style="color:#66d9ef">Seq&lt;/span>&lt;span style="color:#f92672">[&lt;/span>&lt;span style="color:#66d9ef">Future&lt;/span>&lt;span style="color:#f92672">[&lt;/span>&lt;span style="color:#66d9ef">HttpResponse&lt;/span>&lt;span style="color:#f92672">]]&lt;/span> &lt;span style="color:#66d9ef">=&lt;/span> pageNumbers
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">.&lt;/span>map&lt;span style="color:#f92672">(&lt;/span>page &lt;span style="color:#66d9ef">=&amp;gt;&lt;/span> &lt;span style="color:#a6e22e">Http&lt;/span>&lt;span style="color:#f92672">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">.&lt;/span>singleRequest&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#a6e22e">HttpRequest&lt;/span>&lt;span style="color:#f92672">(&lt;/span>uri &lt;span style="color:#66d9ef">=&lt;/span> &lt;span style="color:#e6db74">s&amp;#34;https://examples.org/mix_list/&lt;/span>&lt;span style="color:#e6db74">$page&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#f92672">)))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Future&lt;/span>&lt;span style="color:#f92672">.&lt;/span>sequence&lt;span style="color:#f92672">(&lt;/span>futures&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">.&lt;/span>map&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#66d9ef">_&lt;/span>&lt;span style="color:#f92672">.&lt;/span>map&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#a6e22e">Unmarshal&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#66d9ef">_&lt;/span>&lt;span style="color:#f92672">).&lt;/span>to&lt;span style="color:#f92672">[&lt;/span>&lt;span style="color:#66d9ef">MixList&lt;/span>&lt;span style="color:#f92672">]))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">.&lt;/span>flatMap&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#a6e22e">Future&lt;/span>&lt;span style="color:#f92672">.&lt;/span>sequence&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#66d9ef">_&lt;/span>&lt;span style="color:#f92672">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">.&lt;/span>map&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#66d9ef">_&lt;/span>&lt;span style="color:#f92672">.&lt;/span>map&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#66d9ef">_&lt;/span>&lt;span style="color:#f92672">.&lt;/span>data&lt;span style="color:#f92672">.&lt;/span>rl&lt;span style="color:#f92672">.&lt;/span>length&lt;span style="color:#f92672">).&lt;/span>sum&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>本意是请求所有的分页内容，以为使用 singleRequest 同时请求所有的分页即可，没想到却出错了。&lt;/p>
&lt;pre tabindex="0">&lt;code>(WaitingForResponseEntitySubscription)]Response entity was not subscribed after 1 second.
Make sure to read the response `entity` body or call `entity.discardBytes()` on it
&lt;/code>&lt;/pre>&lt;p>为什么会这样呢？&lt;/p>
&lt;p>其实 akka-http 在 singleRequest 时，针对同一个 hostname 会创建一个连接池，如果有相同域名的请求可以提升请求速度。&lt;/p>
&lt;p>但当函数参数&lt;code>pages&lt;/code>足够大，超过了连接池最大并发请求数时，新进入连接池的请求就得不到处理，也就会出现超时的情况。&lt;/p>
&lt;p>如何解决呢？&lt;/p>
&lt;p>可以将请求放到 akka-stream 中，限制同时处理的请求个数。&lt;code>mapAsyncUnordered&lt;/code>的第一个参数就是最大并发个数。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> fetchRlCnt&lt;span style="color:#f92672">(&lt;/span>pageNumbers&lt;span style="color:#66d9ef">:&lt;/span> &lt;span style="color:#66d9ef">Seq&lt;/span>&lt;span style="color:#f92672">[&lt;/span>&lt;span style="color:#66d9ef">Int&lt;/span>&lt;span style="color:#f92672">])&lt;/span>&lt;span style="color:#66d9ef">:&lt;/span> &lt;span style="color:#66d9ef">Future&lt;/span>&lt;span style="color:#f92672">[&lt;/span>&lt;span style="color:#66d9ef">Int&lt;/span>&lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#66d9ef">=&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Source&lt;/span>&lt;span style="color:#f92672">(&lt;/span>pageNumbers&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">.&lt;/span>map&lt;span style="color:#f92672">(&lt;/span>it &lt;span style="color:#66d9ef">=&amp;gt;&lt;/span> &lt;span style="color:#a6e22e">HttpRequest&lt;/span>&lt;span style="color:#f92672">(&lt;/span>uri &lt;span style="color:#66d9ef">=&lt;/span> &lt;span style="color:#e6db74">s&amp;#34;https://examples.org/mix_list/&lt;/span>&lt;span style="color:#e6db74">$it&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#f92672">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">.&lt;/span>mapAsyncUnordered&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#ae81ff">5&lt;/span>&lt;span style="color:#f92672">)(&lt;/span>&lt;span style="color:#a6e22e">Http&lt;/span>&lt;span style="color:#f92672">().&lt;/span>singleRequest&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#66d9ef">_&lt;/span>&lt;span style="color:#f92672">).&lt;/span>flatMap&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#a6e22e">Unmarshal&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#66d9ef">_&lt;/span>&lt;span style="color:#f92672">).&lt;/span>to&lt;span style="color:#f92672">[&lt;/span>&lt;span style="color:#66d9ef">MixList&lt;/span>&lt;span style="color:#f92672">]))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">.&lt;/span>map&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#66d9ef">_&lt;/span>&lt;span style="color:#f92672">.&lt;/span>data&lt;span style="color:#f92672">.&lt;/span>rl&lt;span style="color:#f92672">.&lt;/span>length&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">.&lt;/span>runFold&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>&lt;span style="color:#f92672">)(&lt;/span>&lt;span style="color:#66d9ef">_&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#66d9ef">_&lt;/span>&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这样一来，在 akka-stream 层面做了最大并发个数的限制，HTTP 连接池也就不会超时了。&lt;/p>
&lt;h2 id="使用-akka-http-json-代替-spray">使用 akka-http-json 代替 spray&lt;/h2>
&lt;p>akka-http 自带的 json 库是&lt;a class="link" href="https://github.com/spray/spray-json" target="_blank" rel="noopener"
>spray&lt;/a>，需要手动创建一个&lt;code>implicit JsonFormat&lt;/code>，不是很好用。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> akka.http.scaladsl.server.Directives
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> akka.http.scaladsl.marshallers.sprayjson.SprayJsonSupport
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> spray.json._
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// domain model
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">final&lt;/span> &lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Item&lt;/span>&lt;span style="color:#f92672">(&lt;/span>name&lt;span style="color:#66d9ef">:&lt;/span> &lt;span style="color:#66d9ef">String&lt;/span>&lt;span style="color:#f92672">,&lt;/span> id&lt;span style="color:#66d9ef">:&lt;/span> &lt;span style="color:#66d9ef">Long&lt;/span>&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// collect your json format instances into a support trait:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">trait&lt;/span> &lt;span style="color:#a6e22e">JsonSupport&lt;/span> &lt;span style="color:#66d9ef">extends&lt;/span> &lt;span style="color:#a6e22e">SprayJsonSupport&lt;/span> &lt;span style="color:#66d9ef">with&lt;/span> &lt;span style="color:#a6e22e">DefaultJsonProtocol&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">implicit&lt;/span> &lt;span style="color:#66d9ef">val&lt;/span> itemFormat &lt;span style="color:#66d9ef">=&lt;/span> jsonFormat2&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#a6e22e">Item&lt;/span>&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// use it wherever json (un)marshalling is needed
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">MyJsonService&lt;/span> &lt;span style="color:#66d9ef">extends&lt;/span> &lt;span style="color:#a6e22e">Directives&lt;/span> &lt;span style="color:#66d9ef">with&lt;/span> &lt;span style="color:#a6e22e">JsonSupport&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">val&lt;/span> route &lt;span style="color:#66d9ef">=&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> get &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> pathSingleSlash &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> complete&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#a6e22e">Item&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;thing&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#ae81ff">42&lt;/span>&lt;span style="color:#f92672">))&lt;/span> &lt;span style="color:#75715e">// will render as JSON
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;a class="link" href="https://github.com/hseeberger/akka-http-json" target="_blank" rel="noopener"
>akka-http-json&lt;/a>将许多 JSON 库与 akka-http 进行了集成，非常方便，我们这里选择比较易用的&lt;a class="link" href="https://circe.github.io/circe/" target="_blank" rel="noopener"
>circe&lt;/a>。&lt;/p>
&lt;pre tabindex="0">&lt;code>&amp;#34;de.heikoseeberger&amp;#34; %% &amp;#34;akka-http-circe&amp;#34; % &amp;#34;1.37.0&amp;#34;
&lt;/code>&lt;/pre>&lt;p>使用时引入必要的包即可。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> de.heikoseeberger.akkahttpcirce.FailFastCirceSupport._
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> io.circe.generic.auto._
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">StreamerRoutes&lt;/span>&lt;span style="color:#f92672">(&lt;/span>streamerRepository&lt;span style="color:#66d9ef">:&lt;/span> &lt;span style="color:#66d9ef">ActorRef&lt;/span>&lt;span style="color:#f92672">[&lt;/span>&lt;span style="color:#66d9ef">StreamerActor.Command&lt;/span>&lt;span style="color:#f92672">])&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#66d9ef">implicit&lt;/span> &lt;span style="color:#66d9ef">val&lt;/span> system&lt;span style="color:#66d9ef">:&lt;/span> &lt;span style="color:#66d9ef">ActorSystem&lt;/span>&lt;span style="color:#f92672">[&lt;/span>&lt;span style="color:#66d9ef">_&lt;/span>&lt;span style="color:#f92672">])&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">implicit&lt;/span> &lt;span style="color:#66d9ef">val&lt;/span> timeout&lt;span style="color:#66d9ef">:&lt;/span> &lt;span style="color:#66d9ef">Timeout&lt;/span> &lt;span style="color:#f92672">=&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Timeout&lt;/span>&lt;span style="color:#f92672">.&lt;/span>create&lt;span style="color:#f92672">(&lt;/span>system&lt;span style="color:#f92672">.&lt;/span>settings&lt;span style="color:#f92672">.&lt;/span>config&lt;span style="color:#f92672">.&lt;/span>getDuration&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;myapp.routes.ask-timeout&amp;#34;&lt;/span>&lt;span style="color:#f92672">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> getStreamerCount&lt;span style="color:#66d9ef">:&lt;/span> &lt;span style="color:#66d9ef">Future&lt;/span>&lt;span style="color:#f92672">[&lt;/span>&lt;span style="color:#66d9ef">StreamerActor.StreamerCount&lt;/span>&lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#66d9ef">=&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> streamerRepository&lt;span style="color:#f92672">.&lt;/span>ask&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#a6e22e">StreamerActor&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">QueryStreamerCount&lt;/span>&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">val&lt;/span> routes&lt;span style="color:#66d9ef">:&lt;/span> &lt;span style="color:#66d9ef">Route&lt;/span> &lt;span style="color:#f92672">=&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> path&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;streamerCount&amp;#34;&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> get &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> onSuccess&lt;span style="color:#f92672">(&lt;/span>getStreamerCount&lt;span style="color:#f92672">)(&lt;/span>complete&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#66d9ef">_&lt;/span>&lt;span style="color:#f92672">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>可以看到，circe 不需要手动创建 Format 对象，能够自动处理序列化。&lt;/p>
&lt;p>但到这里还不算完。这里的 StreamerCount 其实是 trait，有两个实现类。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">sealed&lt;/span> &lt;span style="color:#66d9ef">trait&lt;/span> &lt;span style="color:#a6e22e">StreamerCount&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">final&lt;/span> &lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">StreamerCountResult&lt;/span>&lt;span style="color:#f92672">(&lt;/span>datetime&lt;span style="color:#66d9ef">:&lt;/span> &lt;span style="color:#66d9ef">Instant&lt;/span>&lt;span style="color:#f92672">,&lt;/span> count&lt;span style="color:#66d9ef">:&lt;/span> &lt;span style="color:#66d9ef">Int&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#66d9ef">extends&lt;/span> &lt;span style="color:#a6e22e">StreamerCount&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">final&lt;/span> &lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">StreamerCountError&lt;/span>&lt;span style="color:#f92672">(&lt;/span>error&lt;span style="color:#66d9ef">:&lt;/span> &lt;span style="color:#66d9ef">String&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#66d9ef">extends&lt;/span> &lt;span style="color:#a6e22e">StreamerCount&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>circe 在序列化时，会默认将实现类的名称作为 key 放入 json 中。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;StreamerCountResult&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;datetime&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;2021-08-13T10:52:50.301390Z&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;count&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">2843&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这虽然保留了类型信息方便反序列化，但与外部系统进行交互时，会很显得很多余。&lt;/p>
&lt;p>想要去除这个 key 的包装，我们可以引入&lt;code>circe-generic-extras&lt;/code>包。&lt;/p>
&lt;pre tabindex="0">&lt;code>&amp;#34;io.circe&amp;#34; %% &amp;#34;circe-generic-extras&amp;#34; % &amp;#34;0.14.1&amp;#34;
&lt;/code>&lt;/pre>&lt;p>引入&lt;code>io.circe.generic.extras.Configuration&lt;/code>并进行配置，再使用&lt;code>import io.circe.generic.extras.auto._&lt;/code>替换&lt;code>import io.circe.generic.auto._&lt;/code>即可。代码如下。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">package&lt;/span> app
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> akka.actor.typed.scaladsl.AskPattern._
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> akka.actor.typed.&lt;span style="color:#f92672">{&lt;/span>&lt;span style="color:#a6e22e">ActorRef&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#a6e22e">ActorSystem&lt;/span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> akka.http.scaladsl.model.&lt;span style="color:#f92672">{&lt;/span>&lt;span style="color:#a6e22e">ContentTypes&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#a6e22e">HttpEntity&lt;/span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> akka.http.scaladsl.server.Directives._
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> akka.http.scaladsl.server.Route
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> akka.util.Timeout
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> de.heikoseeberger.akkahttpcirce.FailFastCirceSupport._
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> io.circe.generic.extras.auto._
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> io.circe.generic.extras.Configuration
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> scala.concurrent.Future
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">StreamerRoutes&lt;/span>&lt;span style="color:#f92672">(&lt;/span>streamerRepository&lt;span style="color:#66d9ef">:&lt;/span> &lt;span style="color:#66d9ef">ActorRef&lt;/span>&lt;span style="color:#f92672">[&lt;/span>&lt;span style="color:#66d9ef">StreamerActor.Command&lt;/span>&lt;span style="color:#f92672">])&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#66d9ef">implicit&lt;/span> &lt;span style="color:#66d9ef">val&lt;/span> system&lt;span style="color:#66d9ef">:&lt;/span> &lt;span style="color:#66d9ef">ActorSystem&lt;/span>&lt;span style="color:#f92672">[&lt;/span>&lt;span style="color:#66d9ef">_&lt;/span>&lt;span style="color:#f92672">])&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">implicit&lt;/span> &lt;span style="color:#66d9ef">val&lt;/span> timeout&lt;span style="color:#66d9ef">:&lt;/span> &lt;span style="color:#66d9ef">Timeout&lt;/span> &lt;span style="color:#f92672">=&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Timeout&lt;/span>&lt;span style="color:#f92672">.&lt;/span>create&lt;span style="color:#f92672">(&lt;/span>system&lt;span style="color:#f92672">.&lt;/span>settings&lt;span style="color:#f92672">.&lt;/span>config&lt;span style="color:#f92672">.&lt;/span>getDuration&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;myapp.routes.ask-timeout&amp;#34;&lt;/span>&lt;span style="color:#f92672">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">implicit&lt;/span> &lt;span style="color:#66d9ef">val&lt;/span> genDevConfig&lt;span style="color:#66d9ef">:&lt;/span> &lt;span style="color:#66d9ef">Configuration&lt;/span> &lt;span style="color:#f92672">=&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Configuration&lt;/span>&lt;span style="color:#f92672">.&lt;/span>default&lt;span style="color:#f92672">.&lt;/span>withDiscriminator&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;_type&amp;#34;&lt;/span>&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> getStreamerCount&lt;span style="color:#66d9ef">:&lt;/span> &lt;span style="color:#66d9ef">Future&lt;/span>&lt;span style="color:#f92672">[&lt;/span>&lt;span style="color:#66d9ef">StreamerActor.StreamerCount&lt;/span>&lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#66d9ef">=&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> streamerRepository&lt;span style="color:#f92672">.&lt;/span>ask&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#a6e22e">StreamerActor&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">QueryStreamerCount&lt;/span>&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">val&lt;/span> routes&lt;span style="color:#66d9ef">:&lt;/span> &lt;span style="color:#66d9ef">Route&lt;/span> &lt;span style="color:#f92672">=&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> path&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;streamerCount&amp;#34;&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> get &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> onSuccess&lt;span style="color:#f92672">(&lt;/span>getStreamerCount&lt;span style="color:#f92672">)(&lt;/span>complete&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#66d9ef">_&lt;/span>&lt;span style="color:#f92672">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>返回的 Response 变成了我们期望的样子，类型信息保留在了&lt;code>_type&lt;/code>字段上，未来反序列化时也不会问题。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;datetime&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;2021-08-13T10:57:35.209627Z&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;count&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">2883&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;_type&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;StreamerCountResult&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item></channel></rss>